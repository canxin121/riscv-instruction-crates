name: Cargo Build & Test with Full RISC-V Toolchain

on:
  push:

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    name: Rust project - ${{ matrix.toolchain }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable

    steps:
      # 检出项目代码
      - name: Checkout project code
        uses: actions/checkout@v4

      # 安装和设置 Rust 工具链
      - name: Setup Rust toolchain
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

      # 将预编译的 RISC-V 工具链添加到 PATH
      - name: Prepare RISC-V toolchain
        run: |
          # 检查链接情况
          ldd ${{ github.workspace }}/assets/riscv64-unknown-elf-as
          # 添加 assets 目录到 PATH
          echo "${{ github.workspace }}/assets" >> $GITHUB_ENV

      # 准备所需的 riscv-unified-db 数据库
      - name: Clone riscv-unified-db
        run: git clone --depth 1 https://github.com/riscv-software-src/riscv-unified-db assets/riscv-unified-db

      # 构建项目
      - name: Build project
        run: cargo build --release --verbose

      # 运行项目
      - name: Run project
        run: cargo run --release --verbose

      # 确保重新编译以进行测试
      - name: Touch source file to ensure recompile for test
        run: touch riscv-instruction/src/lib.rs

      # 运行测试
      - name: Run tests
        run: cargo test --release --verbose -- --show-output
